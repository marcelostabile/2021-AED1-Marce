
TArbolLibros<Libro> libreria (lleno)  // O(1)
TArbolAutoresBase<Autor> autoresBase  (vació)	// O(1)
ABO<Autor> autoresOptimo (vació)	// O(1)
Archivo txt de autores	// O(1)

construirABO(libreria,autoresBase,autoresOptimo,archivo)
Lista<Libro> listaLibros <- libreria.inorden	// O(N)
Nodo actualLibro <- listaLibros.getPrimero()	// O(1)
Mientras actualLibro <> nulo Hacer	// O(N)
	Nodo<Autor> autor = actualLibro.datos.getAutores().getPrimero	// O(1)
	Mientras autor <> nulo Hacer	// O(A)
		autoresBase.insertar(nuevo TElementoAB<Autor>(autor.etiqueta,autor.datos)) // O(logM)
		autor <- autor.siguiente		// O(1)
	FinMientras
	actualLibro <- actualLibro.siguiente	// O(1)
FinMientras

String[] frecuencias <- ManejadorArchivo.leer(archivo)	// O(X)
Para cada linea en frecuencias Hacer	// O(X)
	autoresBase.cargarFrecuencia(linea)	// O(logM)
FinParaCada


int[] frecExito <- nuevo int[autoresBase.tamanio + 1]	// O(1)
int[] frecNoExito <- nuevo int[autoresBase.tamanio + 1]	// O(1)
TElemento[] claves <- nuevo TElemento[autoresBase.tamanio + 1]	// O(1)

autoresBase.completaVectores(claves,frecExito,frecNoExito)	// O(M)
CalculadoraMatricesOptimo matriz <- nuevo CalculadorMatricesOptimo(autoresBase.tamanio + 1)	// O(1)
matriz.encontrarOptimo(autoresBase.tamanio,frecExito,frecNoExito)	// O(M)
matriz.armarABO(claves,frecExito,frecNoExito,autoresOptimo)	// O(M)
Fin
N : TAMANO LIBRERIA
M: TAMANO DE AUTORES BASE
A: TAMANO DE AUTORES DE CADA LIBRO
X: TAMANO DEL ARCHIVO
orden total : O(max(N*A*logM, X.logM, M)) 

-----------------------

TArbolAutores listarTítulos( de tipo string autor, de tipo TArbolLibros libreria):
Lista<String> titulos <- nuevo Lista<String>	// O(1)
TElementoAB<Autor> autorActual <- this.buscar(autor)	// O(logN)
Si autorActual <> nulo Hacer	// O(1)
	Nodo<String> libro <- autorActual.datos.getLibros.primero	// O(1)
	Mientras libro <> nulo  Hacer	// O(M)
		TElemento<Libro> buscado <- libreria.buscar(libro.etiqueta)	// O(L)
		Si buscado <> nulo Hacer	// O(1)
			titulos.insertar(buscado.datos.titulo,buscado.datos)	// O(logT)
				
		FinSi
		libro = libro.siguiente // O(1)
	FinMientras	
	devolver titulos	// O(1)
FinSi
N: tamanio de el arbol autores
M: tamanio de los libros del autor
L: tamanio de la libreria
T: tamanio de la lista 

orden Total : O(max(logN, M*max(logT,L)))
----------------------------

TArbolB nodosNivel( de tipo entero nivel ):
Si esVacio o nivel<1 Entonces	// O(1)
	devolver 0	// O(1)
Fin Si
raiz.nodosNivel(nivel)	

TElementoAB nodosNivel( de tipo entero nivel ):
Si nivel = 1 Entonces	// O(1)
	devolver 1	// O(1)
Fin Si
contador <- 0	// O(1)
Si hijoIzq <> nulo Hacer	// O(1)
	contador<- contador + hijoIzq.nodosNivel(nivel-1)
FinSi
Si hijoDer <> nulo Hacer	// O(1)
	contador<- contador + hijoDer.nodosNivel(nivel-1)
FinSi
devolver contador	// O(1)

N: SIENDO LA CANTIDAD DE ELEMENTOS EN EL ARBOL
O(N)














